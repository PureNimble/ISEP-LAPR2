@startuml

skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US010 - Sequence Diagram Full

autonumber

actor "Client" as Client
participant ":PlaceOfferUI" as System
participant ":PlaceOfferController" as Controller
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as Repositories
participant ":ApplicationSession" as app
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as User
participant "userRepository\n:UserRepository" as UserRepository
participant "publishedAnnouncementRepository\n:PublishedAnnouncementRepository" as PublishedAnnouncementRepository
participant "offerRepository\n:OfferRepository" as OfferRepository
participant ":XMapper" as XMapper
participant "listOfPropertiesDTO:List<Properties>" as listProperties
participant "propertiesDto:PropertiesDto" as PropertiesDto
participant "offerDto:OfferDTO" as offerDto
participant "Offer" as Offer

activate Client

Client -> System : asks to place an offer on a property
activate System

System -> Controller** : create

System -> Controller : getListOfProperties()
activate Controller

Controller -> Controller : getClientFromSession

Controller -> app : getInstance()
activate app

app --> Controller: appSession
deactivate app

Controller -> APP: getCurrentUserSession()
activate APP

APP --> Controller : getCurrentUserSession
deactivate APP

Controller -> User : email = getUserEmail()
activate User

User --> Controller : email
deactivate User

Controller -> UserRepository : getClientEmail()
activate UserRepository

UserRepository --> Controller : clientEmail
deactivate UserRepository

Controller -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> Controller : repositories
deactivate RepositorySingleton

Controller -> Repositories : getPublishedAnnouncementRepository()
activate Repositories

Repositories --> Controller: PublishedAnnouncementRepository
deactivate Repositories

Controller -> PublishedAnnouncementRepository : getListOfProperties()
activate PublishedAnnouncementRepository

PublishedAnnouncementRepository --> Controller : listOfProperties
deactivate PublishedAnnouncementRepository

Controller -> XMapper : toDto(listOfProperties)
activate XMapper

XMapper -> listProperties**: create()

    loop

    XMapper -> listProperties: date = getDate()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: property = getProperty()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: typeOfBusiness = getTypeOfBusiness()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: propertyType = getPropertyType()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: business = getBusiness()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties :agent = getAgent()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: durationOfContract = getDurationOfContract()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> listProperties: comission = getComission()
    activate listProperties

    XMapper -[hidden]> listProperties
    deactivate listProperties

    XMapper -> XMapper : propertiesDto = toDto(agent,property,typeOfBusiness,propertyType,business,date,durationOfContract, comission)
    activate XMapper

    deactivate XMapper

    XMapper --> PropertiesDto**: create(...)

    XMapper -> listProperties: add(propertieDTO)
    activate listProperties

    deactivate listProperties
    end

XMapper --> Controller : listOfPropertiesDTO
deactivate XMapper

Controller --> System : listOfPropertiesDTO
deactivate Controller

System --> Client : shows the list of properties
deactivate System

Client -> System : selects the desired property
activate System

System --> Client : request the offer amount
deactivate System

Client -> System : submits data
activate System

System -> Controller : createOffer(propertyDescription)
activate Controller

Controller -> Controller : getPropertyDTOByDescription(PropertyDescription)

Controller -> PublishedAnnouncementRepository : getPropertyDTOByDescription()
activate PublishedAnnouncementRepository

PublishedAnnouncementRepository --> Controller : PropertyDTO
deactivate PublishedAnnouncementRepository

Controller --> Controller : PropertyDTO

Controller -> OfferRepository : createOffer(property)
activate OfferRepository

OfferRepository -> Offer** : createOffer(property)
activate Offer

Offer -> offerDto : name = getName()
activate offerDto
deactivate offerDto

Offer -> offerDto : client = getClient()
activate offerDto
deactivate offerDto

Offer -> offerDto : orderAmount = getOrderAmount()
activate offerDto
deactivate offerDto

Offer -> offerDto : publishedAnnouncement = getPublishedAnnouncement()
activate offerDto
deactivate offerDto

Offer -> offerDto : offerState = getOfferState()
activate offerDto
deactivate offerDto

deactivate Offer



OfferRepository -> OfferRepository : addOffer(offer)

OfferRepository -> OfferRepository : validateOffer(offer)

OfferRepository --> OfferRepository

OfferRepository --> OfferRepository

OfferRepository --> Controller : offer
deactivate OfferRepository

Controller --> System : offer

System --> Client : displays operation success

@enduml