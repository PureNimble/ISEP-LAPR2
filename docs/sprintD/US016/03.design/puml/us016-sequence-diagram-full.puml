@startuml

title US016 - Sequence Diagram Full

skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Agent" as Agent
participant ":ListMessageUI" as System
participant ":ListMessageController" as Controller
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as Repository
participant "messageRepository:\nMessageRepository" as MessageRepository
participant ":ApplicationSession" as app
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as User
participant "employeeRepository\n:Employee Repository" as Employee

participant ":XMapper" as Mapper
participant "listOfMessagesDTO:List<Messages>" as listMessagesDTO
participant "listOfMessages:List<Messages>" as listMessages

participant "email:\nEmail" as Email
participant "testEmailDomain:\ntestEmailDomain" as EmailDomain
participant "type:\nTestType" as TestType


activate Agent

Agent -> System : asks to see the schedule requests
activate System

System -> Controller** : create

System -> Controller : getListBooking()
activate Controller

Controller -> Controller : getAgentFromSession

Controller -> app : getInstance()
activate app

app --> Controller : appSession
deactivate app

Controller -> APP : getCurrentSession()
activate APP

APP --> Controller : currentSession
deactivate APP

Controller -> User : email = getUserEmail()
activate User

User --> Controller : email
deactivate User

Controller -> Employee : getAgentByEmail()
activate Employee

Employee --> Controller : agentByEmail
deactivate Employee

Controller -> RepositorySingleton : getInstance()
activate RepositorySingleton

RepositorySingleton --> Controller : repositories
deactivate RepositorySingleton

Controller -> Repository : getMessageRepository()
activate Repository

Repository --> Controller : messageRepository
deactivate Repository

Controller -> MessageRepository : getMessageRequestListByAgentAndDate(employeeByEmail, beginDate, endDate)
activate MessageRepository

MessageRepository --> Controller : getMessageRequestListByAgentAndDate
deactivate MessageRepository

Controller -> Mapper : toDTO(messageListByAgentAndDate)
activate Mapper

Mapper --> listMessagesDTO** : create()

    loop

    Mapper -> listMessages: clientName = clientName()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> listMessages : clientPhoneNumber = clientPhoneNumber()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> listMessages : date = date()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> listMessages : initialTime = initialTime()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> listMessages : endTime = endTime()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> listMessages : description = description()
    activate listMessages

    Mapper -[hidden]> listMessages
    deactivate listMessages

    Mapper -> Mapper : messageDTO = toDTO(clientName, clientPhoneNumber, description, date, initialTime, endTime)

    Mapper --> listMessagesDTO** : create(...)

    Mapper --> listMessagesDTO : add(messageDTO)
    activate listMessagesDTO
    deactivate listMessagesDTO

    end

Mapper --> Controller : messageListByAgentAndDate
deactivate Mapper

Controller --> System : messageListByAgentAndDate
deactivate Controller



System --> Agent : shows the schedule requests
deactivate System

Agent -> System : selects a schedule request to respond
activate System

System --> Agent : shows the desired schedule request
deactivate System

Agent -> System : selects an email domain
activate System

System --> Agent : asks to write a message/response
deactivate System

Agent -> System : types the requested data
activate System

System -> Controller : addEmailDomain(...)
activate Controller

Controller -> Email : addEmailDomain(...)
activate Email

Email -> Email : getEmailDomain(...)
activate Email

Email --> Email : testEmailDomain
deactivate Email

Email -> EmailDomain : get...
activate EmailDomain

EmailDomain --> Email : ...
deactivate EmailDomain

Email -> TestType : getExternalModule()
deactivate TestType

TestType --> Email : em
deactivate TestType

Email -> 



Controller --> System : success
deactivate Controller

System --> Agent : display operation success
deactivate System

@enduml