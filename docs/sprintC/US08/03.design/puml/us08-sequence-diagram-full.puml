@startuml

'https://plantuml.com/sequence-diagram

autonumber

@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title PublishAnnouncementRequestUI Sequence Diagram (SSD)

autonumber

actor "Agent" as Agent
participant ":PublishAnnouncementRequestUI" as PublishAnnouncementRequestUI
participant ":PublishAnnouncementRequestController" as PublishAnnouncementRequestController
participant ":Repositories" as Singleton
participant "repositories\n:Repositories" as repositories
participant ":ApplicationSession" as AplicationSession
participant "appSession\n:ApplicationSession" as aplicationSession
participant "currentSession\n:UserSession" as UserSession
participant "announcementRequestRepository\n:AnnouncementRequestRepository" as AnnouncementRequestRepository
participant "comissionRepository\n:ComissionRepository" as ComissionRepository
participant ":AnnouncementRequestMapper" as AnnoucementRequestMapper
participant "listAnnouncementRequestDto:List<AnnouncementRequestDto>" as listAnnouncementRequestDto
participant "listAnnouncementRequest:List<AnnouncementRequest>" as listAnnouncementRequest
participant "announcementRequestDto:AnnouncementRequestDto" as AnnouncementRequestDto
participant "publishedAnnouncementRepository\n:PublishedAnnouncementRepository" as PublishAnnouncementRepository
participant "employeeRepository\n:EmployeeRepository" as EmployeeRepository
participant "PublishedAnnouncement" as PublishedAnnouncement

activate Agent

    Agent -> PublishAnnouncementRequestUI : asks to see the list of property announcement request
    activate PublishAnnouncementRequestUI

PublishAnnouncementRequestUI -> PublishAnnouncementRequestController**: create

PublishAnnouncementRequestUI -> PublishAnnouncementRequestController : getAnnouncementRequestList()
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> PublishAnnouncementRequestController: getEmployeeFromSession

PublishAnnouncementRequestController -> AplicationSession: getInstance()
activate AplicationSession

AplicationSession --> PublishAnnouncementRequestController:appSession
deactivate AplicationSession

PublishAnnouncementRequestController -> aplicationSession :getCurrentSession()
activate aplicationSession

aplicationSession --> PublishAnnouncementRequestController:currentSession
deactivate aplicationSession

PublishAnnouncementRequestController -> UserSession :email = getUserEmail()
activate UserSession

UserSession --> PublishAnnouncementRequestController:email
deactivate UserSession

PublishAnnouncementRequestController ->EmployeeRepository:getEmployeeByEmail()
activate EmployeeRepository

EmployeeRepository --> PublishAnnouncementRequestController:employeeByEmail
deactivate EmployeeRepository




PublishAnnouncementRequestController -> Singleton: getInstance()
activate Singleton

Singleton --> PublishAnnouncementRequestController: repositories
deactivate Singleton

PublishAnnouncementRequestController -> repositories: getAnnouncementsRequestRepository()
activate repositories

repositories --> PublishAnnouncementRequestController:announcementRepository
deactivate repositories

PublishAnnouncementRequestController -> AnnouncementRequestRepository:getAnnouncementRequestListByAgent(employeeByEmail)
activate AnnouncementRequestRepository

AnnouncementRequestRepository --> PublishAnnouncementRequestController:announcementsRequestListByAgent
deactivate AnnouncementRequestRepository

PublishAnnouncementRequestController -> AnnoucementRequestMapper: toDto(announcementsRequestListByAgent)
activate AnnoucementRequestMapper

AnnoucementRequestMapper --> listAnnouncementRequestDto**: create()

loop

AnnoucementRequestMapper -> listAnnouncementRequest :agent = getAgent()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: property = getProperty()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: typeOfBusiness = getTypeOfBusiness()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: propertyType = getPropertyType()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: business = getBusiness()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: date = geDate()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest


AnnoucementRequestMapper -> listAnnouncementRequest: durationOfContract = geDate()
activate listAnnouncementRequest

deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: status = getStatus()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> AnnoucementRequestMapper : announcementsRequestDto = toDto(agent,property,typeOfBusiness,propertyType,business,date,durationOfContract)
activate AnnoucementRequestMapper

deactivate AnnoucementRequestMapper

AnnoucementRequestMapper --> AnnouncementRequestDto**: create(...)

AnnoucementRequestMapper -> listAnnouncementRequestDto: add(announcementRequestDto)
activate listAnnouncementRequestDto

deactivate listAnnouncementRequestDto
end

AnnoucementRequestMapper --> PublishAnnouncementRequestController: listAnnouncementRequestDto
deactivate AnnoucementRequestMapper
PublishAnnouncementRequestController --> PublishAnnouncementRequestUI:listAnnouncementRequestDto
deactivate PublishAnnouncementRequestController

     PublishAnnouncementRequestUI --> Agent : shows list of announcement request responsible for that agent and asks to select one
        deactivate PublishAnnouncementRequestUI

            Agent -> PublishAnnouncementRequestUI : selects one announcement request
            activate PublishAnnouncementRequestUI


alt Accepts Announcement Request
 PublishAnnouncementRequestUI -> PublishAnnouncementRequestController : getComission()
           activate PublishAnnouncementRequestController

           PublishAnnouncementRequestController -> Singleton : getInstance()
           activate Singleton

           Singleton --> PublishAnnouncementRequestController : repositories
           deactivate Singleton

           PublishAnnouncementRequestController -> repositories : getComissionRepository()
           activate repositories

           repositories --> PublishAnnouncementRequestController : ComissionRepository
           deactivate repositories

               PublishAnnouncementRequestController -> ComissionRepository : getComission()
                activate ComissionRepository

                ComissionRepository --> PublishAnnouncementRequestController : comission
                deactivate ComissionRepository

           PublishAnnouncementRequestController --> PublishAnnouncementRequestUI : comission
           deactivate PublishAnnouncementRequestController




PublishAnnouncementRequestUI --> Agent:shows the comissions available
deactivate System

Agent -> PublishAnnouncementRequestUI:select the respective comission
deactivate System
end

alt reject Announcement Request


PublishAnnouncementRequestUI --> Agent:requests data(messageJustification)
deactivate System

Agent -> PublishAnnouncementRequestUI:types request data
activate System
end

PublishAnnouncementRequestUI --> Agent:shows the infomation of and asks for confirmation
deactivate PublishAnnouncementRequestUI

 Agent -> PublishAnnouncementRequestUI : submits data
    activate PublishAnnouncementRequestUI

alt Accepts Announcement Request
PublishAnnouncementRequestUI -> PublishAnnouncementRequestController:publishAnnouncementRequest(publishedAnnouncementRequestDescription,comissionDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> PublishAnnouncementRequestController:getAnnouncementRequestDtoByDescription(announcementRequestDescription)
activate PublishAnnouncementRequestController


PublishAnnouncementRequestController -> AnnoucementRequestMapper :getAnnouncementRequestDtoByDescription()
activate AnnoucementRequestMapper

AnnoucementRequestMapper --> PublishAnnouncementRequestController:announcementRequestDto
deactivate AnnoucementRequestMapper

PublishAnnouncementRequestController--> PublishAnnouncementRequestController:announcementRequestDto


PublishAnnouncementRequestController -> PublishAnnouncementRequestController:getComissionByDescription(comissionDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> ComissionRepository:getComissionByDescription()
activate ComissionRepository

PublishAnnouncementRequestController <-- ComissionRepository:comission
deactivate ComissionRepository

PublishAnnouncementRequestController --> PublishAnnouncementRequestController:comission

PublishAnnouncementRequestController -> PublishAnnouncementRepository:createPublishedAnnouncement(announcementRequestDto,comission)
activate PublishAnnouncementRepository

PublishAnnouncementRepository -> PublishedAnnouncement** : createPublishedAnnouncement(announcementRequestDto,comission)
activate PublishedAnnouncement
PublishedAnnouncement -> announcementRequestDto:date = getDate()
activate announcementRequestDto
deactivate announcementRequestDto
PublishedAnnouncement -> announcementRequestDto:typeOfBusiness = getTypeOfBusiness()
activate announcementRequestDto
deactivate announcementRequestDto
PublishedAnnouncement -> announcementRequestDto:property = getProperty()
activate announcementRequestDto
deactivate announcementRequestDto
PublishedAnnouncement -> announcementRequestDto:propertyType = getPropertyType()
activate announcementRequestDto
deactivate announcementRequestDto
PublishedAnnouncement -> announcementRequestDto:business = getBusiness()
activate announcementRequestDto
deactivate announcementRequestDto
PublishedAnnouncement -> announcementRequestDto:durationOfContract = getDurationOfContract()
activate announcementRequestDto
deactivate announcementRequestDto

deactivate PublishedAnnouncement
             PublishAnnouncementRepository -> PublishAnnouncementRepository : addPublishedAnnouncement(publishedAnnouncement)
             activate PublishAnnouncementRepository

             PublishAnnouncementRepository -> PublishAnnouncementRepository : validatePublishedAnnoncement(publishedAnnouncement)
              activate PublishAnnouncementRepository
               PublishAnnouncementRepository --> PublishAnnouncementRepository
               deactivate PublishAnnouncementRepository
                PublishAnnouncementRepository--> PublishAnnouncementRepository
                deactivate PublishAnnouncementRepository


PublishAnnouncementRepository --> PublishAnnouncementRequestController:publishedAnnouncement
deactivate PublishAnnouncementRepository

PublishAnnouncementRequestController --> PublishAnnouncementRequestUI:publishedAnnouncement
end

alt reject Announcement Request

 PublishAnnouncementRequestUI -> PublishAnnouncementRequestUI: sendEmailJustification()


PublishAnnouncementRequestUI -> PublishAnnouncementRequestController:rejectAnnouncementRequest(announcementRequestDtoDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> AnnouncementRequestRepository:getAnnouncementRequestListByAgent(employeeByEmail)
activate AnnouncementRequestRepository

AnnouncementRequestRepository --> PublishAnnouncementRequestController:announcementsRequestListByAgent
deactivate AnnouncementRequestRepository

PublishAnnouncementRequestController -> AnnoucementRequestMapper: toDto(announcementsRequestListByAgent)
activate AnnoucementRequestMapper

AnnoucementRequestMapper --> listAnnouncementRequestDto**: create()

loop

AnnoucementRequestMapper -> listAnnouncementRequest :agent = getAgent()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: property = getProperty()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: typeOfBusiness = getTypeOfBusiness()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: propertyType = getPropertyType()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: business = getBusiness()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: date = geDate()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest


AnnoucementRequestMapper -> listAnnouncementRequest: durationOfContract = geDate()
activate listAnnouncementRequest

deactivate listAnnouncementRequest

AnnoucementRequestMapper -> listAnnouncementRequest: status = geStatus()
activate listAnnouncementRequest

AnnoucementRequestMapper -[hidden]> listAnnouncementRequest
deactivate listAnnouncementRequest

AnnoucementRequestMapper -> AnnoucementRequestMapper : announcementsRequestDto = toDto(agent,property,typeOfBusiness,propertyType,business,date,durationOfContract)
activate AnnoucementRequestMapper

deactivate AnnoucementRequestMapper

AnnoucementRequestMapper --> AnnouncementRequestDto**: create(...)

AnnoucementRequestMapper -> listAnnouncementRequestDto: add(announcementRequestDto)
activate listAnnouncementRequestDto

deactivate listAnnouncementRequestDto
end

AnnoucementRequestMapper --> PublishAnnouncementRequestController: listAnnouncementRequestDto
deactivate AnnoucementRequestMapper

PublishAnnouncementRequestController -> AnnoucementRequestMapper:getAnnouncementRequestDtoByDescription(announcementRequestDtos,announcementRequestDtoDescription)
activate AnnoucementRequestMapper

AnnoucementRequestMapper --> PublishAnnouncementRequestController: getAnnouncementRequestDtoByDescription
deactivate AnnoucementRequestMapper

PublishAnnouncementRequestController -> AnnouncementRequestRepository:rejectAnnouncementRequest(announcementRequestDto)
activate AnnouncementRequestRepository
deactivate AnnouncementRequestRepository


end

        PublishAnnouncementRequestUI --> Agent : displays operation success
    deactivate PublishAnnouncementRequestUI



@enduml
