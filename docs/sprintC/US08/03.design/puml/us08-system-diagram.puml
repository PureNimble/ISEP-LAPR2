@startuml

'https://plantuml.com/sequence-diagram

autonumber

@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title PublishAnnouncementRequestUI Sequence Diagram (SSD)

autonumber

actor "Agent" as Agent
participant ":PublishAnnouncementRequestUI" as PublishAnnouncementRequestUI
participant ":PublishAnnouncementRequestController" as PublishAnnouncementRequestController
participant ":Repositories" as Singleton
participant "repositories\n:Repositories" as repositories
participant ":ApplicationSession" as AplicationSession
participant "appSession\n:ApplicationSession" as aplicationSession
participant "currentSession\n:UserSession" as UserSession
participant "announcementRequestRepository\n:AnnouncementRequestRepository" as AnnouncementRequestRepository
participant "publishedAnnouncementRequestRepository\n:PublishedAnnouncementRequestRepository" as PublishAnnouncementRepository
participant "employeeRepository\n:EmployeeRepository" as EmployeeRepository
participant "comissionRepository\n:ComissionRepository" as ComissionRepository
participant "announcementReques"
participant ":XMapper" as XMapper
participant "listAnnouncementRequestDto:List<AnnouncementRequestDto>" as listAnnouncementRequestDto

activate Agent

    Agent -> PublishAnnouncementRequestUI : asks to see the list of property announcement request
    activate PublishAnnouncementRequestUI

PublishAnnouncementRequestUI -> PublishAnnouncementRequestController**: create

PublishAnnouncementRequestUI -> PublishAnnouncementRequestController : getAnnouncementRequestList()
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> PublishAnnouncementRequestController: getEmployeeFromSession

PublishAnnouncementRequestController -> AplicationSession: getInstance()
activate AplicationSession

AplicationSession --> PublishAnnouncementRequestController:appSession
deactivate AplicationSession

PublishAnnouncementRequestController -> aplicationSession :getCurrentSession()
activate aplicationSession

aplicationSession --> PublishAnnouncementRequestController:currentSession
deactivate aplicationSession

PublishAnnouncementRequestController -> UserSession :email = getUserEmail()
activate UserSession

UserSession --> PublishAnnouncementRequestController:email
deactivate UserSession

PublishAnnouncementRequestController ->EmployeeRepository:getEmployeeByEmail()
activate EmployeeRepository

EmployeeRepository --> PublishAnnouncementRequestController:employeeByEmail
deactivate EmployeeRepository




PublishAnnouncementRequestController -> Singleton: getInstance()
activate Singleton

Singleton --> PublishAnnouncementRequestController: repositories
deactivate Singleton

PublishAnnouncementRequestController -> repositories: getAnnouncementsRequestRepository()
activate repositories

repositories --> PublishAnnouncementRequestController:announcementRepository
deactivate repositories

PublishAnnouncementRequestController -> AnnouncementRequestRepository:getAnnouncementRequestListByAgent(employeeByEmail)
activate AnnouncementRequestRepository

AnnouncementRequestRepository --> PublishAnnouncementRequestController:announcementsRequestListByAgent
deactivate AnnouncementRequestRepository

PublishAnnouncementRequestController -> XMapper: toDto(announcementsRequestListByAgent)
activate XMapper

XMapper --> listAnnouncementRequestDto**: create()



PublishAnnouncementRequestController --> PublishAnnouncementRequestUI:announcementsRequestListByAgent
deactivate PublishAnnouncementRequestController

     PublishAnnouncementRequestUI --> Agent : shows list of announcement request responsible for that agent and asks to select one
        deactivate PublishAnnouncementRequestUI

            Agent -> PublishAnnouncementRequestUI : selects one announcement request
            activate PublishAnnouncementRequestUI



 PublishAnnouncementRequestUI --> PublishAnnouncementRequestController : getTypeComission()
           activate PublishAnnouncementRequestController

           PublishAnnouncementRequestController -> Singleton : getInstance()
           activate Singleton

           Singleton --> PublishAnnouncementRequestController : repositories
           deactivate Singleton

           PublishAnnouncementRequestController -> repositories : getTypeComissionRepository()
           activate repositories

           repositories --> PublishAnnouncementRequestController : typeComissionRepository
           deactivate repositories

               PublishAnnouncementRequestController -> ComissionRepository : getTypeComission()
                activate ComissionRepository

                ComissionRepository --> PublishAnnouncementRequestController : Type Comission
                deactivate ComissionRepository

           PublishAnnouncementRequestController --> PublishAnnouncementRequestUI : Type Comission
           deactivate PublishAnnouncementRequestController



PublishAnnouncementRequestUI --> Agent:shows the list of comissions
deactivate PublishAnnouncementRequestUI

Agent -> PublishAnnouncementRequestUI:selects the respective comssion
activate PublishAnnouncementRequestUI

PublishAnnouncementRequestUI --> Agent:shows the information of the announcement request selected and asks for confirmation
deactivate PublishAnnouncementRequestUI

 Agent -> PublishAnnouncementRequestUI : submits data
    activate PublishAnnouncementRequestUI


PublishAnnouncementRequestUI -> PublishAnnouncementRequestController:publishAnnouncementRequest(publishedAnnouncementRequestDescription,comissionDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> PublishAnnouncementRequestController:getAnnouncementRequestByDescription(announcementRequestDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> Singleton: getInstance()
activate Singleton

Singleton--> PublishAnnouncementRequestController :repositories
deactivate Singleton

PublishAnnouncementRequestController-> repositories:getAnnouncementsRequestRepository()
activate repositories

repositories -->PublishAnnouncementRequestController:getAnnouncementsRequestRepository
deactivate repositories

PublishAnnouncementRequestController -> AnnouncementRequestRepository :getAnnouncementRequestByDescription()
activate AnnouncementRequestRepository

AnnouncementRequestRepository --> PublishAnnouncementRequestController:announcementRequest
deactivate AnnouncementRequestRepository

PublishAnnouncementRequestController--> PublishAnnouncementRequestController:announcementRequest


PublishAnnouncementRequestController -> PublishAnnouncementRequestController:getComissionByDescription(comissionDescription)
activate PublishAnnouncementRequestController

PublishAnnouncementRequestController -> Singleton:getInstance()
activate Singleton

Singleton --> PublishAnnouncementRequestController:repositories
deactivate Singleton

PublishAnnouncementRequestController -> repositories:getComissionRepository()
activate repositories

repositories --> PublishAnnouncementRequestController:comissionRepository
deactivate repositories

PublishAnnouncementRequestController -> ComissionRepository:getComissionByDescription()
activate ComissionRepository

PublishAnnouncementRequestController --> ComissionRepository:comission
deactivate ComissionRepository

PublishAnnouncementRequestController --> PublishAnnouncementRequestController:comission

PublishAnnouncementRequestController -> PublishAnnouncementRepository:createPublishedAnnouncement(announcementRequest,comission)
activate PublishAnnouncementRepository

PublishAnnouncementRepository -> PublishedAnnouncement** : createEmployee (name,passport number,tax number \n,email ,telephone number,store\n role,adress)
             PublishAnnouncementRepository -> PublishAnnouncementRepository : addPublishedAnnouncement(publishedAnnouncement)
             activate PublishAnnouncementRepository
             PublishAnnouncementRepository -> PublishAnnouncementRepository : validatePublishedAnnoncement(publishedAnnouncement)
              activate PublishAnnouncementRepository
               PublishAnnouncementRepository --> PublishAnnouncementRepository
               deactivate PublishAnnouncementRepository
                PublishAnnouncementRepository--> PublishAnnouncementRepository
                deactivate PublishAnnouncementRepository


PublishAnnouncementRepository --> PublishAnnouncementRequestController:publishedAnnouncement
deactivate PublishAnnouncementRepository

PublishAnnouncementRequestController --> PublishAnnouncementRequestUI:publishedAnnouncement

        PublishAnnouncementRequestUI --> Agent : displays operation success
    deactivate PublishAnnouncementRequestUI



@enduml
