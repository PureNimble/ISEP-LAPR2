@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

title US09 - Sequence Diagram Full

autonumber

'hide footbox
actor "Client" as Client
participant ":SendMessageUI" as UI
participant ":SendMessageController" as CTRL
participant ":Repositories" as Repository
participant "repositories\n:Repositories" as Repository2
participant "appSession\n:ApplicationSession" as app
participant "appSession\n:ApplicationSession" as App
participant "currentSession\n:UserSession" as User
participant "clientRepository\n:ClientRepository" as ClientRepository
participant "publishedAnnouncementRepository\n:PublishedAnnouncementRepository" as publish
participant ":XMapper" as XMapper
participant "listOfPropertiesDTO:List<Properties>" as listProperties
participant "propertiesDto:PropertiesDto" as PropertiesDto
participant "messageRepository: \nMessage Repository" as messageRepository
participant "message:\nMessage" as message


autonumber

        activate Client

    Client -> UI: asks to schedule a visit
        activate UI

        UI -> CTRL** : create

        UI -> CTRL : getListOfProperties()
            activate CTRL

            CTRL -> CTRL: getClientFromSession

            CTRL -> app: getInstance()
            activate app

            app --> CTRL:appSession
            deactivate app

            CTRL -> App :getCurrentSession()
            activate App

            App --> CTRL:currentSession
            deactivate App

            CTRL -> User :email = getUserEmail()
            activate User

            User --> CTRL:email
            deactivate User

            CTRL ->ClientRepository:getClientByEmail()
            activate ClientRepository

            ClientRepository --> CTRL:clientByEmail
            deactivate ClientRepository



            CTRL -> Repository: getInstance()
            activate Repository

            Repository --> CTRL: Repository2
            deactivate Repository

            CTRL -> Repository2: getPublishedAnnouncementRepository()
            activate Repository2

            Repository2 --> CTRL:PublishedannouncementRepository
            deactivate Repository2

            CTRL -> publish:getListOfPropertiesByDate(propertyByDate)
            activate publish

            publish --> CTRL:listOfPropertiesByDate
            deactivate publish

            CTRL -> XMapper: toDTO(listOfPropertiesByDate)
            activate XMapper

            XMapper --> listProperties**: create()

            loop


            XMapper -> listProperties: date = geDate()
                        activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties: property = getProperty()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties: typeOfBusiness = getTypeOfBusiness()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties: propertyType = getPropertyType()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties: business = getBusiness()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties :agent = getAgent()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> listProperties: durationOfContract = geDate()
            activate listProperties

            XMapper -[hidden]> listProperties
            deactivate listProperties

            XMapper -> XMapper : propertiesDto = toDto(agent,property,typeOfBusiness,propertyType,business,date,durationOfContract)
            activate XMapper

            deactivate XMapper

            XMapper --> PropertiesDto**: create(...)

            XMapper -> listProperties: add(propertieDTO)
            activate listProperties

            deactivate listProperties
            end

            XMapper --> CTRL: listOfPropertiesDTO
            deactivate XMapper
            CTRL --> UI:listOfPropertiesDTO
            deactivate CTRL

                 UI --> Client : shows a list of properties sorted from the most recent entries to the oldest
                    deactivate UI

              Client -> UI: selects a property of his interest
                    activate UI

               UI --> Client: requests the name, phone number and preferred \ndate and time slot (from x hour to y hour) for the property visit
                    deactivate UI

               Client -> UI: submits the requested data
                       activate UI

               UI -> CTRL:createMessage(propertyDescription, name, phone number and date and time slot)
               activate CTRL

               CTRL -> CTRL:getPropertyDTOByDescription(PropertyDescription)
               activate CTRL


               CTRL -> XMapper :getPropertyDTOByDescription()
               activate XMapper

               XMapper --> CTRL:PropertyDTO
               deactivate XMapper

               CTRL--> CTRL:PropertyDTO

               CTRL -> messageRepository:createMessage(propertyDescription, name, phone number and date and time slot)
               activate messageRepository

               messageRepository -> message** : createMessage(propertyDescription, name, phone number and date and time slot)
               activate message
               message -> publishAnouncementDTO:date = getDate()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO
               message -> publishAnouncementDTO:typeOfBusiness = getTypeOfBusiness()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO
               message -> publishAnouncementDTO:property = getProperty()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO
               message -> publishAnouncementDTO:propertyType = getPropertyType()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO
               message -> publishAnouncementDTO:business = getBusiness()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO
               message -> publishAnouncementDTO:durationOfContract = getDurationOfContract()
               activate publishAnouncementDTO
               deactivate publishAnouncementDTO

               deactivate message
                            messageRepository -> messageRepository : addMessage(message)
                            activate messageRepository

                            messageRepository -> messageRepository : validateMessage(message)
                             activate messageRepository
                              messageRepository --> messageRepository
                              deactivate messageRepository
                               messageRepository--> messageRepository
                               deactivate messageRepository


               messageRepository --> CTRL:message
               deactivate messageRepository

               CTRL --> UI:message


                       UI --> Client : shows a success message and the message created
                   deactivate UI

@enduml